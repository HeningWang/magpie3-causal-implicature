{"remainingRequest":"/Users/heningwang/Documents/GitHub/magpie3-causal-implicature/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/heningwang/Documents/GitHub/magpie3-causal-implicature/experiments/pilot-indirectSource/src/App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"/Users/heningwang/Documents/GitHub/magpie3-causal-implicature/experiments/pilot-indirectSource/src/App.vue","mtime":1730732333872},{"path":"/Users/heningwang/Documents/GitHub/magpie3-causal-implicature/node_modules/cache-loader/dist/cjs.js","mtime":1721073897630},{"path":"/Users/heningwang/Documents/GitHub/magpie3-causal-implicature/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1721073894735},{"path":"/Users/heningwang/Documents/GitHub/magpie3-causal-implicature/node_modules/cache-loader/dist/cjs.js","mtime":1721073897630},{"path":"/Users/heningwang/Documents/GitHub/magpie3-causal-implicature/node_modules/vue-loader/lib/index.js","mtime":1721073894730}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}