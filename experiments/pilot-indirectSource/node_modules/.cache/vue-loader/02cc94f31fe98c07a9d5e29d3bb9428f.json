{"remainingRequest":"/Users/heningwang/Documents/GitHub/magpie3-causal-implicature/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/heningwang/Documents/GitHub/magpie3-causal-implicature/node_modules/magpie-base/src/components/inputs/MultipleChoiceInput.vue?vue&type=style&index=0&id=76474a20&scoped=true&lang=css&","dependencies":[{"path":"/Users/heningwang/Documents/GitHub/magpie3-causal-implicature/node_modules/magpie-base/src/components/inputs/MultipleChoiceInput.vue","mtime":1721073897705},{"path":"/Users/heningwang/Documents/GitHub/magpie3-causal-implicature/node_modules/css-loader/dist/cjs.js","mtime":1721073897349},{"path":"/Users/heningwang/Documents/GitHub/magpie3-causal-implicature/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1721073894735},{"path":"/Users/heningwang/Documents/GitHub/magpie3-causal-implicature/node_modules/postcss-loader/src/index.js","mtime":1721073895712},{"path":"/Users/heningwang/Documents/GitHub/magpie3-causal-implicature/node_modules/cache-loader/dist/cjs.js","mtime":1721073897630},{"path":"/Users/heningwang/Documents/GitHub/magpie3-causal-implicature/node_modules/vue-loader/lib/index.js","mtime":1721073894730}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5vcHRpb25zIGxhYmVsLAoub3B0aW9ucyBsYWJlbCAqIHsKICBjdXJzb3I6IHBvaW50ZXI7Cn0KCi5tdWx0aXBsZS1jaG9pY2UudmVydGljYWwgewogIHRleHQtYWxpZ246IGxlZnQ7CiAgd2lkdGg6IDUwMHB4OwogIG1hcmdpbjogMCBhdXRvOwp9CgoubXVsdGlwbGUtY2hvaWNlLnZlcnRpY2FsIGxhYmVsIHsKICBkaXNwbGF5OiBibG9jazsKfQoKLm11bHRpcGxlLWNob2ljZS5ob3Jpem9udGFsIGxhYmVsIHsKICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgbWFyZ2luOiAwIDEwcHg7Cn0KCi5vcHRpb246aG92ZXIgewogIGJhY2tncm91bmQtY29sb3I6ICMzMjRkOTM7Cn0K"},{"version":3,"sources":["MultipleChoiceInput.vue"],"names":[],"mappings":";AAgJA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"MultipleChoiceInput.vue","sourceRoot":"../../node_modules/magpie-base/src/components/inputs","sourcesContent":["<docs>\n\n```vue\n<Experiment>\n    <Screen>\n\n      <Slide>\n        <p>How was your breakfast?</p>\n        <MultipleChoiceInput\n            :response.sync= \"$magpie.measurements.breakfast\"\n            :options=\"['Not enjoyable', 'Rather not enjoyable', 'OK', 'Rather enjoyable', 'Really enjoyable']\" />\n        <button @click=\"$magpie.saveAndNextScreen();\">Submit</button>\n      </Slide>\n\n    </Screen>\n</Experiment>\n```\n\n\n```vue\n<Experiment>\n    <Screen>\n\n      <Slide>\n        <p>How was your breakfast?</p>\n        <MultipleChoiceInput\n            :response.sync= \"$magpie.measurements.breakfast\"\n            orientation=\"horizontal\"\n            :options=\"['Not enjoyable', 'Rather not enjoyable', 'OK', 'Rather enjoyable', 'Really enjoyable']\" />\n        <button @click=\"$magpie.saveAndNextScreen();\">Submit</button>\n      </Slide>\n\n    </Screen>\n</Experiment>\n```\n\n```vue\n<Experiment>\n  <Screen>\n      <p>Which sentence is ungrammatical?</p>\n      <MultipleChoiceInput\n          :response.sync= \"$magpie.measurements.grammatical\"\n          :randomize=\"true\"\n          :options=\"['banana', 'bear', 'horse', 'bread']\"\n          :options-html=\"[\n              'The <strong>banana</strong> went out to buy some groceries.',\n              'The <strong>bear</strong> raced past the barn froze.',\n              'The <strong>horse</strong> could not have been eaten why it was racing.',\n              'The <strong>bread</strong> was sour before it was made.'\n              ]\">\n      </MultipleChoiceInput>\n      <button @click=\"$magpie.saveAndNextScreen();\">Submit</button>\n  </Screen>\n  <DebugResultsScreen />\n</Experiment>\n```\n\n</docs>\n\n<template>\n  <div :class=\"['multiple-choice', orientation]\">\n    <form>\n      <div class=\"options\">\n        <label v-for=\"i in order\" :key=\"i\"\n          ><input\n            :value=\"options[i]\"\n            type=\"radio\"\n            name=\"options\"\n            @input=\"$emit('update:response', options[i])\" />\n          <template v-if=\"labels\"\n            ><span v-if=\"!optionsHtml.length\">{{ options[i] }}</span\n            ><span v-else v-html=\"optionsHtml[i]\" /></template\n        ></label>\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\n/**\n * Have the participant choose between multiple options.\n */\nimport shuffle from 'lodash/shuffle';\n\nexport default {\n  name: 'MultipleChoiceInput',\n  props: {\n    /**\n     * The possible options to choose from\n     */\n    options: {\n      type: Array,\n      required: true\n    },\n    /**\n     * The possible options to choose from as HTML strings\n     */\n    optionsHtml: {\n      type: Array,\n      default: () => []\n    },\n    /**\n     * Whether to display 'vertical' or 'horizontal'\n     */\n    orientation: {\n      type: String,\n      default: 'vertical'\n    },\n    /**\n     * Whether to display labels\n     */\n    labels: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     * Whether to randomize the option order\n     */\n    randomize: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    let order = Object.keys(this.options);\n    if (this.randomize) {\n      order = shuffle(order);\n    }\n    return {\n      order\n    };\n  },\n  methods: {\n    onOptionClick(option) {\n      /**\n       * Change event with the chosen option. Useful in combination with `response.sync`\n       */\n      this.$emit('update:response', option);\n    }\n  }\n};\n</script>\n\n<style scoped>\n.options label,\n.options label * {\n  cursor: pointer;\n}\n\n.multiple-choice.vertical {\n  text-align: left;\n  width: 500px;\n  margin: 0 auto;\n}\n\n.multiple-choice.vertical label {\n  display: block;\n}\n\n.multiple-choice.horizontal label {\n  display: inline-block;\n  margin: 0 10px;\n}\n\n.option:hover {\n  background-color: #324d93;\n}\n</style>\n"]}]}